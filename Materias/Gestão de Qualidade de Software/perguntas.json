[
  {
    "question": "O Scrum prescreve quatro eventos formais, para inspeção e adaptação dos sprints. Dois desses eventos são: ",
    "options": [
      { "text": "revisão das especicações e reunião de planejamento da Sprint." },
      { "text": "reunião diária e retrospectiva da Sprint." },
      { "text": "preleção do Product Owner e revisão dos requisitos." },
      { "text": "revisão do backlog e orientação do Scrum Master." },
      { "text": "reunião de revisão da Sprint e descrição de requisitos no backlog." }
    ],
    "Resposta": "reunião diária e retrospectiva da Sprint."
  },
  {
    "question": "Focando no desenvolvimento de software, Ian Sommerville dene um processo de software como um conjunto de atividades que leva à produção de um produto de software (SOMMERVILLE, 2007). SOMMERVILLE, Ian –Engenharia de Software; 8ª ed. –São Paulo: Pearson Addison –Wesley, 2007 <br><br>Existem quatro atividades fundamentais de processo:   <br><br>A - Desenvolvimento do Software: <br>B - Especicação do Software: <br>C - Evolução do Software: <br>D - Validação do Software: A ordem indicada para a realização dessas atividades é:  ",
    "options": [
      { "text": "D – A – B – C." },
      { "text": "C – B – A – D." },
      { "text": "B – A – D – C" },
      { "text": "A – B – C – D." },
      { "text": "A – D – B – C." }
    ],
    "Resposta": "B – A – D – C"
  },
  {
    "question": "O projeto de casos de teste é parte do teste de sistema e de componentes. Há várias abordagens para executar testes em condições similares àqueles a que um usuário será confrontado. A armativa refere-se ao teste de:  ",
    "options": [
      { "text": "sistema." },
      { "text": "integração." },
      { "text": "regressão." },
      { "text": "operação." },
      { "text": "unidade." }
    ],
    "Resposta": "sistema."
  },
  {
    "question": "Considerando o teste de software, há o chamado teste de unidade, que consiste em testar  ",
    "options": [
      { "text": "a integração dos componentes do sistema." },
      { "text": "o software completo em seu ambiente nal de operação." },
      { "text": "a maior parte testável de um programa de computador." },
      { "text": "o software completo em ambiente controlado." },
      { "text": "individualmente, componentes ou módulos de software." }
    ],
    "Resposta": "individualmente, componentes ou módulos de software."
  },
  {
    "question": "Uma das técnicas mais comuns utilizadas para o desenvolvimento/execução de testes de software é chamada de Caixa-Preta (ou Teste Funcional). Selecione os tipos de teste que são aplicáveis a essa técnica: <br>A - regressão.<br>B - de métodos.<br>C - sistema. <br> - aceitação. <br>Assinale a alternativa correta.  ",
    "options": [
      { "text": "da relação apresentada, somente B, C e D." },
      { "text": "da relação apresentada, somente A, C e D." },
      { "text": "da relação apresentada nenhum é aplicável a essa técnica" },
      { "text": "da relação apresentada, somente A, B e C." },
      { "text": "da relação apresentada todos são aplicáveis a essa técnica." }
    ],
    "Resposta": "da relação apresentada, somente A, C e D."
  },
  {
    "question": "Um teste no qual são vericadas as funcionalidades do software sem preocupação com detalhes de implementação. Trata-se  ",
    "options": [
      { "text": "de teste unitário." },
      { "text": "de teste de caixa-branca." },
      { "text": "de teste de integração." },
      { "text": "de teste de regressão." },
      { "text": "de teste de caixa-preta." }
    ],
    "Resposta": "de teste de caixa-preta."
  },
  {
    "question": "O CMMI é um modelo para capacidade e maturidade de software. Sobre o CMMI, assinale a alternativa correta.  ",
    "options": [
      { "text": "O nível 3 de maturidade, conhecido como denido, signica que os projetos estão aderindo aos processos denidos pela organização." },
      { "text": "A certicação é realizada internamente pelos membros das equipes do projeto." },
      { "text": "Com mais maturidade, a organização vai depender de prossionais com um elevado grau de conhecimento técnico." },
      { "text": "O CMMI um modelo de referência brasileiro que contém práticas necessárias à maturidade dos processos de desenvolvimento de software." },
      { "text": "A ordem dos níveis CMMI por estágios é a seguinte: 1-Inicial, 2-Denido, 3-Repetível, 4- Gerenciado, 5-Otimizado." }
    ],
    "Resposta": "O nível 3 de maturidade, conhecido como denido, signica que os projetos estão aderindo aos processos denidos pela organização."
  },
  {
    "question": "Qual é o modelo, onde falhas não são toleráveis com uma grande importância no planejamento da etapa e análise de riscos?   ",
    "options": [
      { "text": "incremental" },
      { "text": "cascata" },
      { "text": "prototipagem" },
      { "text": "Interativo" },
      { "text": "Espiral" }
    ],
    "Resposta": "Espiral"
  }  ,
  {
    "question": "Os 4 valores do Manifesto Ágil denem melhores maneiras para realizar desenvolvimento de software. É preciso valorizar:   ",
    "options": [
      { "text": "Processos e ferramentas" },
      { "text": "Documentação" },
      { "text": "Software em funcionamento" },
      { "text": "Negociação de contrato" },
      { "text": "Planejamento" }
    ],
    "Resposta": "Software em funcionamento"
  }  ,
  {
    "question": "Dentre as técnicas empregadas no projeto de interfaces de sistemas, uma delas é a condução de testes de usabilidade, em que os resultados fornecem importantes indicadores para melhorar a qualidade da interface. Em que consistem os testes de usabilidade?  ",
    "options": [
      { "text": "Mostrar o sistema para um usuário, solicitar que ele realize algum tipo de tarefa, observando as suas reações à interface, como, por exemplo, erros cometidos, diculdades e eciência no cumprimento da tarefa." },
      { "text": "Utilizar um software robô de teste para fazer acessos aleatórios ao sistema, que tenta utilizar elementos da interface e registra erros encontrados." },
      { "text": "Submeter o sistema a um software robô de teste e vericar os tempos de resposta a cada padrão de navegação, vericando se estão de acordo com os requisitos não funcionais do sistema." },
      { "text": "Mostrar o sistema para um grupo de pessoas e coletar a opinião dos participantes sobre a interface e os conceitos." },
      { "text": "Entregar um questionário para os usuários do sistema com perguntas sobre a interface e mapear respostas." }
    ],
    "Resposta": "Mostrar o sistema para um usuário, solicitar que ele realize algum tipo de tarefa, observando as suas reações à interface, como, por exemplo, erros cometidos, diculdades e eciência no cumprimento da tarefa."
  },
  {
    "question": "Também conhecido por teste estrutural ou orientado à lógica, é uma técnica de teste de software que trabalha diretamente sobre o código fonte do componente de software para avaliar aspectos, tais como, teste de condição, teste de fluxo de dados, teste de ciclos e teste de caminhos lógicos. Trata-se da técnica de teste",
    "options": [
      { "text": "da Caixa-branca." },
      { "text": "da Caixa-preta." },
      { "text": "de Regressão." },
      { "text": "da Caixa-cinza." },
      { "text": "de Integração." }
    ],
    "Resposta": "da Caixa-branca."
  },
  {
    "question": "Musa (1987), citado por Pressman (2016), traz a denição de conabilidade de um software como a probabilidade de operação livre de falhas de um programa de computador em ambiente especíco durante determinado tempo especicado. Logo, pode-se dizer que a conabilidade: <br>I. considera que um número máximo de falhas ocorrerá na compilação do software, dada a garantia de que atenderá a parâmetros de conformidade. <br>II. considera que um número mínimo de falhas ocorrerá na execução do software, dada a garantia de que atenderá a parâmetros de conformidade. <br>III. considera que um número mínimo de acertos ocorrerá na execução do software, dada a garantia de que atenderá a parâmetros de conformidade. <br>Qual(is) armativa(s) está(ão) correta(s)?",
    "options": [
      { "text": "Apenas a armativa III está correta." },
      { "text": "Apenas a armativa I está correta." },
      { "text": "Apenas as armativas I e II estão corretas" },
      { "text": "Apenas as armativas I e III estão corretas." },
      { "text": "Apenas a armativa II está correta." }
    ],
    "Resposta": "Apenas a armativa II está correta."
  },
  {
    "question": "Quando há a necessidade de testar novamente um software por completo, a m de vericar se problemas que haviam sido resolvidos antes da modicação ou liberação de novas funcionalidades não voltaram a acontecer, esse teste se chama:   ",
    "options": [
      { "text": "Teste de caixa cinza." },
      { "text": "Teste de regressão." },
      { "text": "Teste de instalação." },
      { "text": "Teste de usabilidade." },
      { "text": "Teste de segurança" }
    ],
    "Resposta": "Teste de regressão."
  },
  {
    "question": "Com os ciclos de vida de desenvolvimento de software, a maioria dos processos considera, na etapa de especicação do software, as seguintes atividades a serem realizadas: <br>A - Especicação de Requisitos <br>B - Levantamento e Análise de Requisitos <br>C - Estudo de Viabilidade <br>D - Validação de Requisitos <br>A ordem indicada para a realização dessas atividades é:   ",
    "options": [
      { "text": "C – B – A – D." },
      { "text": "D – A – B – C" },
      { "text": "A – D – B – C." },
      { "text": "A – B – C – D." },
      { "text": "B – A – D – C." }
    ],
    "Resposta": "C – B – A – D."
  },
  {
    "question": "Considerando o Modelo de Ciclo de Vida de Sistemas por Prototipagem Evolucionária, armase que  ",
    "options": [
      { "text": "é possível determinar com exatidão o tempo que o projeto demorará." },
      { "text": "não há uma forma de saber de antemão o número de iterações necessárias." },
      { "text": "os clientes não têm acesso a uma visualização dos progressos do desenvolvimento" },
      { "text": "apenas a fase nal gera um produto que não é um documento." },
      { "text": "refere-se à criação de um modelo que será descartado em vez de se tornar parte do software entregue nal." }
    ],
    "Resposta": "não há uma forma de saber de antemão o número de iterações necessárias."
  },
  {
    "question": "Um dos tipos comumente empregados é o teste de regressão, o qual tem como objetivo  ",
    "options": [
      { "text": "vericar o desempenho do sistema ou parte dele." },
      { "text": "vericar a existência de defeitos no nal do processo" },
      { "text": "identicar defeitos através da vericação estática do código-fonte." },
      { "text": "identicar defeitos no sistema em situação de sobrecarga." },
      { "text": "vericar a existência de defeitos após alterações." }
    ],
    "Resposta": "vericar a existência de defeitos após alterações."
  },
  {
    "question": "Você está codificando um módulo de um sistema de controle de livros em uma biblioteca e finalizou a parte de cadastro de livros. Para efetuar os testes unitários nessa unidade, você precisará verificar se as informações estão sendo gravadas corretamente no banco de dados, na medida em que você inclui, altera ou exclui registros. Qual elemento da unidade você está testando?   ",
    "options": [
      { "text": "Caminhos independentes." },
      { "text": "Caminhos de manipulação de erro" },
      { "text": "Interface." },
      { "text": "Estrutura de dados locais." },
      { "text": "Condições limite." }
    ],
    "Resposta": "Estrutura de dados locais."
  },
  {
    "question": "A principal metodologia tradicional utilizada no desenvolvimento de software é o modelo clássico, também conhecido como cascata ou sequencial. Nesse modelo  ",
    "options": [
      { "text": "o projeto é dividido em fases de maneira exível." },
      { "text": "utiliza-se o desenvolvimento incremental e iterativo" },
      { "text": "os requisitos não podem ser estáveis" },
      { "text": "o custo das alterações do software diminui à medida em que o desenvolvimento progride." },
      { "text": "o produto de software é testado durante o processo e qualquer problema introduzido nas fases anteriores é removido aqui." }
    ],
    "Resposta": "o produto de software é testado durante o processo e qualquer problema introduzido nas fases anteriores é removido aqui."
  }
]
